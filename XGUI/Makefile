# Makefile.in generated by automake 1.10 from Makefile.am.
# Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/main
pkglibdir = $(libdir)/main
pkgincludedir = $(includedir)/main
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = main$(EXEEXT)
subdir = .
DIST_COMMON = $(am__configure_deps) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(srcdir)/config.h.in \
	$(top_srcdir)/configure depcomp install-sh missing
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno config.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_main_OBJECTS = main.$(OBJEXT) XWidget.$(OBJEXT) XLayout.$(OBJEXT) \
	XVBoxLayout.$(OBJEXT) XApplication.$(OBJEXT) XButton.$(OBJEXT) \
	XHBoxLayout.$(OBJEXT) XFont.$(OBJEXT) XMessageBox.$(OBJEXT) \
	XCheckBox.$(OBJEXT) XEditBox.$(OBJEXT) XLabel.$(OBJEXT) \
	XAbstractWidegt.$(OBJEXT) XListBox.$(OBJEXT) XItem.$(OBJEXT) \
	XVScrollbar.$(OBJEXT) XRadioButton.$(OBJEXT) \
	XToolTip.$(OBJEXT) XPopMenu.$(OBJEXT) XDialog.$(OBJEXT) \
	XObject.$(OBJEXT) XStringArray.$(OBJEXT) XUseful.$(OBJEXT)
main_OBJECTS = $(am_main_OBJECTS)
main_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(main_SOURCES)
DIST_SOURCES = $(main_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  { test ! -d $(distdir) \
    || { find $(distdir) -type d ! -perm -200 -exec chmod u+w {} ';' \
         && rm -fr $(distdir); }; }
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
distuninstallcheck_listfiles = find . -type f -print
distcleancheck_listfiles = find . -type f -print
ACLOCAL = ${SHELL} /XGUI/missing --run aclocal-1.10
ALLOCA = 
AMTAR = ${SHELL} /XGUI/missing --run tar
AUTOCONF = ${SHELL} /XGUI/missing --run autoconf
AUTOHEADER = ${SHELL} /XGUI/missing --run autoheader
AUTOMAKE = ${SHELL} /XGUI/missing --run automake-1.10
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = -I/XGUI/XGUI/include
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lSDL -lSDL_ttf -lSDL_gfx
LTLIBOBJS = 
MAKEINFO = ${SHELL} /XGUI/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = main
PACKAGE_BUGREPORT = zgxdream@gmail.com
PACKAGE_NAME = screen
PACKAGE_STRING = screen 1.0
PACKAGE_TARNAME = screen
PACKAGE_VERSION = 1.0
PATH_SEPARATOR = :
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 1.0
XMKMF = 
abs_builddir = /XGUI
abs_srcdir = /XGUI
abs_top_builddir = /XGUI
abs_top_srcdir = /XGUI
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /XGUI/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_builddir = .
top_srcdir = .
AUTOMAKE_OPTIONS = foreign
main_SOURCES = main.cpp XGUI/src/gui/XWidget.cpp XGUI/src/gui/XLayout.cpp \
		XGUI/src/gui/XVBoxLayout.cpp XGUI/src/gui/XApplication.cpp \
		XGUI/src/gui/XButton.cpp XGUI/src/gui/XHBoxLayout.cpp XGUI/src/gui/XFont.cpp \
		XGUI/src/gui/XMessageBox.cpp XGUI/src/gui/XCheckBox.cpp \
		XGUI/src/gui/XEditBox.cpp XGUI/src/gui/XLabel.cpp XGUI/src/gui/XAbstractWidegt.cpp \
		XGUI/src/gui/XListBox.cpp XGUI/src/gui/XItem.cpp \
		XGUI/src/gui/XVScrollbar.cpp XGUI/src/gui/XRadioButton.cpp XGUI/src/gui/XToolTip.cpp \
		XGUI/src/gui/XPopMenu.cpp XGUI/src/gui/XDialog.cpp  \
		XGUI/src/util/XObject.cpp XGUI/src/util/XStringArray.cpp XGUI/src/util/XUseful.cpp \
		XGUI/include/XList.h XGUI/include/XUtils.h XGUI/include/XArray.h \
		XGUI/include/XEventType.h\
		XGUI/include/XWidget.h XGUI/include/XLayout.h  XGUI/include/XLayout.h \
		XGUI/include/XVBoxLayout.h XGUI/include/XApplication.h XGUI/include/XToolTip.h \
		XGUI/include/XButton.h XGUI/include/XAbstractWidegt.h XGUI/include/XHBoxLayout.h \
		XGUI/include/XFont.h XGUI/include/XMessageBox.h \
		XGUI/include/XCheckBox.h XGUI/include/XRidioButton.h XGUI/include/XPopMenu.h XGUI/include/XDialog.h \
		XGUI/include/XEditBox.h XGUI/include/XLabel.h XGUI/include/XListBox.h XGUI/include/XItem.h \
		XGUI/include/XVScrollbar.h XGUI/include/XObject.h XGUI/include/XStringArray.h \
		XGUI/include/XUseful.h

all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
am--refresh:
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign '; \
	      cd $(srcdir) && $(AUTOMAKE) --foreign  \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)

config.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) $(AM_MAKEFLAGS) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status config.h
$(srcdir)/config.h.in:  $(am__configure_deps) 
	cd $(top_srcdir) && $(AUTOHEADER)
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f config.h stamp-h1
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
main$(EXEEXT): $(main_OBJECTS) $(main_DEPENDENCIES) 
	@rm -f main$(EXEEXT)
	$(CXXLINK) $(main_OBJECTS) $(main_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/XAbstractWidegt.Po
include ./$(DEPDIR)/XApplication.Po
include ./$(DEPDIR)/XButton.Po
include ./$(DEPDIR)/XCheckBox.Po
include ./$(DEPDIR)/XDialog.Po
include ./$(DEPDIR)/XEditBox.Po
include ./$(DEPDIR)/XFont.Po
include ./$(DEPDIR)/XHBoxLayout.Po
include ./$(DEPDIR)/XItem.Po
include ./$(DEPDIR)/XLabel.Po
include ./$(DEPDIR)/XLayout.Po
include ./$(DEPDIR)/XListBox.Po
include ./$(DEPDIR)/XMessageBox.Po
include ./$(DEPDIR)/XObject.Po
include ./$(DEPDIR)/XPopMenu.Po
include ./$(DEPDIR)/XRadioButton.Po
include ./$(DEPDIR)/XStringArray.Po
include ./$(DEPDIR)/XToolTip.Po
include ./$(DEPDIR)/XUseful.Po
include ./$(DEPDIR)/XVBoxLayout.Po
include ./$(DEPDIR)/XVScrollbar.Po
include ./$(DEPDIR)/XWidget.Po
include ./$(DEPDIR)/main.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

XWidget.o: XGUI/src/gui/XWidget.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XWidget.o -MD -MP -MF $(DEPDIR)/XWidget.Tpo -c -o XWidget.o `test -f 'XGUI/src/gui/XWidget.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XWidget.cpp
	mv -f $(DEPDIR)/XWidget.Tpo $(DEPDIR)/XWidget.Po
#	source='XGUI/src/gui/XWidget.cpp' object='XWidget.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XWidget.o `test -f 'XGUI/src/gui/XWidget.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XWidget.cpp

XWidget.obj: XGUI/src/gui/XWidget.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XWidget.obj -MD -MP -MF $(DEPDIR)/XWidget.Tpo -c -o XWidget.obj `if test -f 'XGUI/src/gui/XWidget.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XWidget.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XWidget.cpp'; fi`
	mv -f $(DEPDIR)/XWidget.Tpo $(DEPDIR)/XWidget.Po
#	source='XGUI/src/gui/XWidget.cpp' object='XWidget.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XWidget.obj `if test -f 'XGUI/src/gui/XWidget.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XWidget.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XWidget.cpp'; fi`

XLayout.o: XGUI/src/gui/XLayout.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XLayout.o -MD -MP -MF $(DEPDIR)/XLayout.Tpo -c -o XLayout.o `test -f 'XGUI/src/gui/XLayout.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XLayout.cpp
	mv -f $(DEPDIR)/XLayout.Tpo $(DEPDIR)/XLayout.Po
#	source='XGUI/src/gui/XLayout.cpp' object='XLayout.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XLayout.o `test -f 'XGUI/src/gui/XLayout.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XLayout.cpp

XLayout.obj: XGUI/src/gui/XLayout.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XLayout.obj -MD -MP -MF $(DEPDIR)/XLayout.Tpo -c -o XLayout.obj `if test -f 'XGUI/src/gui/XLayout.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XLayout.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XLayout.cpp'; fi`
	mv -f $(DEPDIR)/XLayout.Tpo $(DEPDIR)/XLayout.Po
#	source='XGUI/src/gui/XLayout.cpp' object='XLayout.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XLayout.obj `if test -f 'XGUI/src/gui/XLayout.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XLayout.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XLayout.cpp'; fi`

XVBoxLayout.o: XGUI/src/gui/XVBoxLayout.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XVBoxLayout.o -MD -MP -MF $(DEPDIR)/XVBoxLayout.Tpo -c -o XVBoxLayout.o `test -f 'XGUI/src/gui/XVBoxLayout.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XVBoxLayout.cpp
	mv -f $(DEPDIR)/XVBoxLayout.Tpo $(DEPDIR)/XVBoxLayout.Po
#	source='XGUI/src/gui/XVBoxLayout.cpp' object='XVBoxLayout.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XVBoxLayout.o `test -f 'XGUI/src/gui/XVBoxLayout.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XVBoxLayout.cpp

XVBoxLayout.obj: XGUI/src/gui/XVBoxLayout.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XVBoxLayout.obj -MD -MP -MF $(DEPDIR)/XVBoxLayout.Tpo -c -o XVBoxLayout.obj `if test -f 'XGUI/src/gui/XVBoxLayout.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XVBoxLayout.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XVBoxLayout.cpp'; fi`
	mv -f $(DEPDIR)/XVBoxLayout.Tpo $(DEPDIR)/XVBoxLayout.Po
#	source='XGUI/src/gui/XVBoxLayout.cpp' object='XVBoxLayout.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XVBoxLayout.obj `if test -f 'XGUI/src/gui/XVBoxLayout.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XVBoxLayout.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XVBoxLayout.cpp'; fi`

XApplication.o: XGUI/src/gui/XApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XApplication.o -MD -MP -MF $(DEPDIR)/XApplication.Tpo -c -o XApplication.o `test -f 'XGUI/src/gui/XApplication.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XApplication.cpp
	mv -f $(DEPDIR)/XApplication.Tpo $(DEPDIR)/XApplication.Po
#	source='XGUI/src/gui/XApplication.cpp' object='XApplication.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XApplication.o `test -f 'XGUI/src/gui/XApplication.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XApplication.cpp

XApplication.obj: XGUI/src/gui/XApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XApplication.obj -MD -MP -MF $(DEPDIR)/XApplication.Tpo -c -o XApplication.obj `if test -f 'XGUI/src/gui/XApplication.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XApplication.cpp'; fi`
	mv -f $(DEPDIR)/XApplication.Tpo $(DEPDIR)/XApplication.Po
#	source='XGUI/src/gui/XApplication.cpp' object='XApplication.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XApplication.obj `if test -f 'XGUI/src/gui/XApplication.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XApplication.cpp'; fi`

XButton.o: XGUI/src/gui/XButton.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XButton.o -MD -MP -MF $(DEPDIR)/XButton.Tpo -c -o XButton.o `test -f 'XGUI/src/gui/XButton.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XButton.cpp
	mv -f $(DEPDIR)/XButton.Tpo $(DEPDIR)/XButton.Po
#	source='XGUI/src/gui/XButton.cpp' object='XButton.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XButton.o `test -f 'XGUI/src/gui/XButton.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XButton.cpp

XButton.obj: XGUI/src/gui/XButton.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XButton.obj -MD -MP -MF $(DEPDIR)/XButton.Tpo -c -o XButton.obj `if test -f 'XGUI/src/gui/XButton.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XButton.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XButton.cpp'; fi`
	mv -f $(DEPDIR)/XButton.Tpo $(DEPDIR)/XButton.Po
#	source='XGUI/src/gui/XButton.cpp' object='XButton.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XButton.obj `if test -f 'XGUI/src/gui/XButton.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XButton.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XButton.cpp'; fi`

XHBoxLayout.o: XGUI/src/gui/XHBoxLayout.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XHBoxLayout.o -MD -MP -MF $(DEPDIR)/XHBoxLayout.Tpo -c -o XHBoxLayout.o `test -f 'XGUI/src/gui/XHBoxLayout.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XHBoxLayout.cpp
	mv -f $(DEPDIR)/XHBoxLayout.Tpo $(DEPDIR)/XHBoxLayout.Po
#	source='XGUI/src/gui/XHBoxLayout.cpp' object='XHBoxLayout.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XHBoxLayout.o `test -f 'XGUI/src/gui/XHBoxLayout.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XHBoxLayout.cpp

XHBoxLayout.obj: XGUI/src/gui/XHBoxLayout.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XHBoxLayout.obj -MD -MP -MF $(DEPDIR)/XHBoxLayout.Tpo -c -o XHBoxLayout.obj `if test -f 'XGUI/src/gui/XHBoxLayout.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XHBoxLayout.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XHBoxLayout.cpp'; fi`
	mv -f $(DEPDIR)/XHBoxLayout.Tpo $(DEPDIR)/XHBoxLayout.Po
#	source='XGUI/src/gui/XHBoxLayout.cpp' object='XHBoxLayout.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XHBoxLayout.obj `if test -f 'XGUI/src/gui/XHBoxLayout.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XHBoxLayout.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XHBoxLayout.cpp'; fi`

XFont.o: XGUI/src/gui/XFont.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XFont.o -MD -MP -MF $(DEPDIR)/XFont.Tpo -c -o XFont.o `test -f 'XGUI/src/gui/XFont.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XFont.cpp
	mv -f $(DEPDIR)/XFont.Tpo $(DEPDIR)/XFont.Po
#	source='XGUI/src/gui/XFont.cpp' object='XFont.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XFont.o `test -f 'XGUI/src/gui/XFont.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XFont.cpp

XFont.obj: XGUI/src/gui/XFont.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XFont.obj -MD -MP -MF $(DEPDIR)/XFont.Tpo -c -o XFont.obj `if test -f 'XGUI/src/gui/XFont.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XFont.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XFont.cpp'; fi`
	mv -f $(DEPDIR)/XFont.Tpo $(DEPDIR)/XFont.Po
#	source='XGUI/src/gui/XFont.cpp' object='XFont.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XFont.obj `if test -f 'XGUI/src/gui/XFont.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XFont.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XFont.cpp'; fi`

XMessageBox.o: XGUI/src/gui/XMessageBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XMessageBox.o -MD -MP -MF $(DEPDIR)/XMessageBox.Tpo -c -o XMessageBox.o `test -f 'XGUI/src/gui/XMessageBox.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XMessageBox.cpp
	mv -f $(DEPDIR)/XMessageBox.Tpo $(DEPDIR)/XMessageBox.Po
#	source='XGUI/src/gui/XMessageBox.cpp' object='XMessageBox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XMessageBox.o `test -f 'XGUI/src/gui/XMessageBox.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XMessageBox.cpp

XMessageBox.obj: XGUI/src/gui/XMessageBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XMessageBox.obj -MD -MP -MF $(DEPDIR)/XMessageBox.Tpo -c -o XMessageBox.obj `if test -f 'XGUI/src/gui/XMessageBox.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XMessageBox.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XMessageBox.cpp'; fi`
	mv -f $(DEPDIR)/XMessageBox.Tpo $(DEPDIR)/XMessageBox.Po
#	source='XGUI/src/gui/XMessageBox.cpp' object='XMessageBox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XMessageBox.obj `if test -f 'XGUI/src/gui/XMessageBox.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XMessageBox.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XMessageBox.cpp'; fi`

XCheckBox.o: XGUI/src/gui/XCheckBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XCheckBox.o -MD -MP -MF $(DEPDIR)/XCheckBox.Tpo -c -o XCheckBox.o `test -f 'XGUI/src/gui/XCheckBox.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XCheckBox.cpp
	mv -f $(DEPDIR)/XCheckBox.Tpo $(DEPDIR)/XCheckBox.Po
#	source='XGUI/src/gui/XCheckBox.cpp' object='XCheckBox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XCheckBox.o `test -f 'XGUI/src/gui/XCheckBox.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XCheckBox.cpp

XCheckBox.obj: XGUI/src/gui/XCheckBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XCheckBox.obj -MD -MP -MF $(DEPDIR)/XCheckBox.Tpo -c -o XCheckBox.obj `if test -f 'XGUI/src/gui/XCheckBox.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XCheckBox.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XCheckBox.cpp'; fi`
	mv -f $(DEPDIR)/XCheckBox.Tpo $(DEPDIR)/XCheckBox.Po
#	source='XGUI/src/gui/XCheckBox.cpp' object='XCheckBox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XCheckBox.obj `if test -f 'XGUI/src/gui/XCheckBox.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XCheckBox.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XCheckBox.cpp'; fi`

XEditBox.o: XGUI/src/gui/XEditBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XEditBox.o -MD -MP -MF $(DEPDIR)/XEditBox.Tpo -c -o XEditBox.o `test -f 'XGUI/src/gui/XEditBox.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XEditBox.cpp
	mv -f $(DEPDIR)/XEditBox.Tpo $(DEPDIR)/XEditBox.Po
#	source='XGUI/src/gui/XEditBox.cpp' object='XEditBox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XEditBox.o `test -f 'XGUI/src/gui/XEditBox.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XEditBox.cpp

XEditBox.obj: XGUI/src/gui/XEditBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XEditBox.obj -MD -MP -MF $(DEPDIR)/XEditBox.Tpo -c -o XEditBox.obj `if test -f 'XGUI/src/gui/XEditBox.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XEditBox.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XEditBox.cpp'; fi`
	mv -f $(DEPDIR)/XEditBox.Tpo $(DEPDIR)/XEditBox.Po
#	source='XGUI/src/gui/XEditBox.cpp' object='XEditBox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XEditBox.obj `if test -f 'XGUI/src/gui/XEditBox.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XEditBox.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XEditBox.cpp'; fi`

XLabel.o: XGUI/src/gui/XLabel.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XLabel.o -MD -MP -MF $(DEPDIR)/XLabel.Tpo -c -o XLabel.o `test -f 'XGUI/src/gui/XLabel.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XLabel.cpp
	mv -f $(DEPDIR)/XLabel.Tpo $(DEPDIR)/XLabel.Po
#	source='XGUI/src/gui/XLabel.cpp' object='XLabel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XLabel.o `test -f 'XGUI/src/gui/XLabel.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XLabel.cpp

XLabel.obj: XGUI/src/gui/XLabel.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XLabel.obj -MD -MP -MF $(DEPDIR)/XLabel.Tpo -c -o XLabel.obj `if test -f 'XGUI/src/gui/XLabel.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XLabel.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XLabel.cpp'; fi`
	mv -f $(DEPDIR)/XLabel.Tpo $(DEPDIR)/XLabel.Po
#	source='XGUI/src/gui/XLabel.cpp' object='XLabel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XLabel.obj `if test -f 'XGUI/src/gui/XLabel.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XLabel.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XLabel.cpp'; fi`

XAbstractWidegt.o: XGUI/src/gui/XAbstractWidegt.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XAbstractWidegt.o -MD -MP -MF $(DEPDIR)/XAbstractWidegt.Tpo -c -o XAbstractWidegt.o `test -f 'XGUI/src/gui/XAbstractWidegt.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XAbstractWidegt.cpp
	mv -f $(DEPDIR)/XAbstractWidegt.Tpo $(DEPDIR)/XAbstractWidegt.Po
#	source='XGUI/src/gui/XAbstractWidegt.cpp' object='XAbstractWidegt.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XAbstractWidegt.o `test -f 'XGUI/src/gui/XAbstractWidegt.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XAbstractWidegt.cpp

XAbstractWidegt.obj: XGUI/src/gui/XAbstractWidegt.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XAbstractWidegt.obj -MD -MP -MF $(DEPDIR)/XAbstractWidegt.Tpo -c -o XAbstractWidegt.obj `if test -f 'XGUI/src/gui/XAbstractWidegt.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XAbstractWidegt.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XAbstractWidegt.cpp'; fi`
	mv -f $(DEPDIR)/XAbstractWidegt.Tpo $(DEPDIR)/XAbstractWidegt.Po
#	source='XGUI/src/gui/XAbstractWidegt.cpp' object='XAbstractWidegt.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XAbstractWidegt.obj `if test -f 'XGUI/src/gui/XAbstractWidegt.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XAbstractWidegt.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XAbstractWidegt.cpp'; fi`

XListBox.o: XGUI/src/gui/XListBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XListBox.o -MD -MP -MF $(DEPDIR)/XListBox.Tpo -c -o XListBox.o `test -f 'XGUI/src/gui/XListBox.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XListBox.cpp
	mv -f $(DEPDIR)/XListBox.Tpo $(DEPDIR)/XListBox.Po
#	source='XGUI/src/gui/XListBox.cpp' object='XListBox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XListBox.o `test -f 'XGUI/src/gui/XListBox.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XListBox.cpp

XListBox.obj: XGUI/src/gui/XListBox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XListBox.obj -MD -MP -MF $(DEPDIR)/XListBox.Tpo -c -o XListBox.obj `if test -f 'XGUI/src/gui/XListBox.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XListBox.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XListBox.cpp'; fi`
	mv -f $(DEPDIR)/XListBox.Tpo $(DEPDIR)/XListBox.Po
#	source='XGUI/src/gui/XListBox.cpp' object='XListBox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XListBox.obj `if test -f 'XGUI/src/gui/XListBox.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XListBox.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XListBox.cpp'; fi`

XItem.o: XGUI/src/gui/XItem.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XItem.o -MD -MP -MF $(DEPDIR)/XItem.Tpo -c -o XItem.o `test -f 'XGUI/src/gui/XItem.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XItem.cpp
	mv -f $(DEPDIR)/XItem.Tpo $(DEPDIR)/XItem.Po
#	source='XGUI/src/gui/XItem.cpp' object='XItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XItem.o `test -f 'XGUI/src/gui/XItem.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XItem.cpp

XItem.obj: XGUI/src/gui/XItem.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XItem.obj -MD -MP -MF $(DEPDIR)/XItem.Tpo -c -o XItem.obj `if test -f 'XGUI/src/gui/XItem.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XItem.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XItem.cpp'; fi`
	mv -f $(DEPDIR)/XItem.Tpo $(DEPDIR)/XItem.Po
#	source='XGUI/src/gui/XItem.cpp' object='XItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XItem.obj `if test -f 'XGUI/src/gui/XItem.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XItem.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XItem.cpp'; fi`

XVScrollbar.o: XGUI/src/gui/XVScrollbar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XVScrollbar.o -MD -MP -MF $(DEPDIR)/XVScrollbar.Tpo -c -o XVScrollbar.o `test -f 'XGUI/src/gui/XVScrollbar.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XVScrollbar.cpp
	mv -f $(DEPDIR)/XVScrollbar.Tpo $(DEPDIR)/XVScrollbar.Po
#	source='XGUI/src/gui/XVScrollbar.cpp' object='XVScrollbar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XVScrollbar.o `test -f 'XGUI/src/gui/XVScrollbar.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XVScrollbar.cpp

XVScrollbar.obj: XGUI/src/gui/XVScrollbar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XVScrollbar.obj -MD -MP -MF $(DEPDIR)/XVScrollbar.Tpo -c -o XVScrollbar.obj `if test -f 'XGUI/src/gui/XVScrollbar.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XVScrollbar.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XVScrollbar.cpp'; fi`
	mv -f $(DEPDIR)/XVScrollbar.Tpo $(DEPDIR)/XVScrollbar.Po
#	source='XGUI/src/gui/XVScrollbar.cpp' object='XVScrollbar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XVScrollbar.obj `if test -f 'XGUI/src/gui/XVScrollbar.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XVScrollbar.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XVScrollbar.cpp'; fi`

XRadioButton.o: XGUI/src/gui/XRadioButton.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XRadioButton.o -MD -MP -MF $(DEPDIR)/XRadioButton.Tpo -c -o XRadioButton.o `test -f 'XGUI/src/gui/XRadioButton.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XRadioButton.cpp
	mv -f $(DEPDIR)/XRadioButton.Tpo $(DEPDIR)/XRadioButton.Po
#	source='XGUI/src/gui/XRadioButton.cpp' object='XRadioButton.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XRadioButton.o `test -f 'XGUI/src/gui/XRadioButton.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XRadioButton.cpp

XRadioButton.obj: XGUI/src/gui/XRadioButton.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XRadioButton.obj -MD -MP -MF $(DEPDIR)/XRadioButton.Tpo -c -o XRadioButton.obj `if test -f 'XGUI/src/gui/XRadioButton.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XRadioButton.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XRadioButton.cpp'; fi`
	mv -f $(DEPDIR)/XRadioButton.Tpo $(DEPDIR)/XRadioButton.Po
#	source='XGUI/src/gui/XRadioButton.cpp' object='XRadioButton.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XRadioButton.obj `if test -f 'XGUI/src/gui/XRadioButton.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XRadioButton.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XRadioButton.cpp'; fi`

XToolTip.o: XGUI/src/gui/XToolTip.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XToolTip.o -MD -MP -MF $(DEPDIR)/XToolTip.Tpo -c -o XToolTip.o `test -f 'XGUI/src/gui/XToolTip.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XToolTip.cpp
	mv -f $(DEPDIR)/XToolTip.Tpo $(DEPDIR)/XToolTip.Po
#	source='XGUI/src/gui/XToolTip.cpp' object='XToolTip.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XToolTip.o `test -f 'XGUI/src/gui/XToolTip.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XToolTip.cpp

XToolTip.obj: XGUI/src/gui/XToolTip.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XToolTip.obj -MD -MP -MF $(DEPDIR)/XToolTip.Tpo -c -o XToolTip.obj `if test -f 'XGUI/src/gui/XToolTip.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XToolTip.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XToolTip.cpp'; fi`
	mv -f $(DEPDIR)/XToolTip.Tpo $(DEPDIR)/XToolTip.Po
#	source='XGUI/src/gui/XToolTip.cpp' object='XToolTip.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XToolTip.obj `if test -f 'XGUI/src/gui/XToolTip.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XToolTip.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XToolTip.cpp'; fi`

XPopMenu.o: XGUI/src/gui/XPopMenu.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XPopMenu.o -MD -MP -MF $(DEPDIR)/XPopMenu.Tpo -c -o XPopMenu.o `test -f 'XGUI/src/gui/XPopMenu.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XPopMenu.cpp
	mv -f $(DEPDIR)/XPopMenu.Tpo $(DEPDIR)/XPopMenu.Po
#	source='XGUI/src/gui/XPopMenu.cpp' object='XPopMenu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XPopMenu.o `test -f 'XGUI/src/gui/XPopMenu.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XPopMenu.cpp

XPopMenu.obj: XGUI/src/gui/XPopMenu.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XPopMenu.obj -MD -MP -MF $(DEPDIR)/XPopMenu.Tpo -c -o XPopMenu.obj `if test -f 'XGUI/src/gui/XPopMenu.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XPopMenu.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XPopMenu.cpp'; fi`
	mv -f $(DEPDIR)/XPopMenu.Tpo $(DEPDIR)/XPopMenu.Po
#	source='XGUI/src/gui/XPopMenu.cpp' object='XPopMenu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XPopMenu.obj `if test -f 'XGUI/src/gui/XPopMenu.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XPopMenu.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XPopMenu.cpp'; fi`

XDialog.o: XGUI/src/gui/XDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XDialog.o -MD -MP -MF $(DEPDIR)/XDialog.Tpo -c -o XDialog.o `test -f 'XGUI/src/gui/XDialog.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XDialog.cpp
	mv -f $(DEPDIR)/XDialog.Tpo $(DEPDIR)/XDialog.Po
#	source='XGUI/src/gui/XDialog.cpp' object='XDialog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XDialog.o `test -f 'XGUI/src/gui/XDialog.cpp' || echo '$(srcdir)/'`XGUI/src/gui/XDialog.cpp

XDialog.obj: XGUI/src/gui/XDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XDialog.obj -MD -MP -MF $(DEPDIR)/XDialog.Tpo -c -o XDialog.obj `if test -f 'XGUI/src/gui/XDialog.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XDialog.cpp'; fi`
	mv -f $(DEPDIR)/XDialog.Tpo $(DEPDIR)/XDialog.Po
#	source='XGUI/src/gui/XDialog.cpp' object='XDialog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XDialog.obj `if test -f 'XGUI/src/gui/XDialog.cpp'; then $(CYGPATH_W) 'XGUI/src/gui/XDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/gui/XDialog.cpp'; fi`

XObject.o: XGUI/src/util/XObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XObject.o -MD -MP -MF $(DEPDIR)/XObject.Tpo -c -o XObject.o `test -f 'XGUI/src/util/XObject.cpp' || echo '$(srcdir)/'`XGUI/src/util/XObject.cpp
	mv -f $(DEPDIR)/XObject.Tpo $(DEPDIR)/XObject.Po
#	source='XGUI/src/util/XObject.cpp' object='XObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XObject.o `test -f 'XGUI/src/util/XObject.cpp' || echo '$(srcdir)/'`XGUI/src/util/XObject.cpp

XObject.obj: XGUI/src/util/XObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XObject.obj -MD -MP -MF $(DEPDIR)/XObject.Tpo -c -o XObject.obj `if test -f 'XGUI/src/util/XObject.cpp'; then $(CYGPATH_W) 'XGUI/src/util/XObject.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/util/XObject.cpp'; fi`
	mv -f $(DEPDIR)/XObject.Tpo $(DEPDIR)/XObject.Po
#	source='XGUI/src/util/XObject.cpp' object='XObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XObject.obj `if test -f 'XGUI/src/util/XObject.cpp'; then $(CYGPATH_W) 'XGUI/src/util/XObject.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/util/XObject.cpp'; fi`

XStringArray.o: XGUI/src/util/XStringArray.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XStringArray.o -MD -MP -MF $(DEPDIR)/XStringArray.Tpo -c -o XStringArray.o `test -f 'XGUI/src/util/XStringArray.cpp' || echo '$(srcdir)/'`XGUI/src/util/XStringArray.cpp
	mv -f $(DEPDIR)/XStringArray.Tpo $(DEPDIR)/XStringArray.Po
#	source='XGUI/src/util/XStringArray.cpp' object='XStringArray.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XStringArray.o `test -f 'XGUI/src/util/XStringArray.cpp' || echo '$(srcdir)/'`XGUI/src/util/XStringArray.cpp

XStringArray.obj: XGUI/src/util/XStringArray.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XStringArray.obj -MD -MP -MF $(DEPDIR)/XStringArray.Tpo -c -o XStringArray.obj `if test -f 'XGUI/src/util/XStringArray.cpp'; then $(CYGPATH_W) 'XGUI/src/util/XStringArray.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/util/XStringArray.cpp'; fi`
	mv -f $(DEPDIR)/XStringArray.Tpo $(DEPDIR)/XStringArray.Po
#	source='XGUI/src/util/XStringArray.cpp' object='XStringArray.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XStringArray.obj `if test -f 'XGUI/src/util/XStringArray.cpp'; then $(CYGPATH_W) 'XGUI/src/util/XStringArray.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/util/XStringArray.cpp'; fi`

XUseful.o: XGUI/src/util/XUseful.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XUseful.o -MD -MP -MF $(DEPDIR)/XUseful.Tpo -c -o XUseful.o `test -f 'XGUI/src/util/XUseful.cpp' || echo '$(srcdir)/'`XGUI/src/util/XUseful.cpp
	mv -f $(DEPDIR)/XUseful.Tpo $(DEPDIR)/XUseful.Po
#	source='XGUI/src/util/XUseful.cpp' object='XUseful.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XUseful.o `test -f 'XGUI/src/util/XUseful.cpp' || echo '$(srcdir)/'`XGUI/src/util/XUseful.cpp

XUseful.obj: XGUI/src/util/XUseful.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XUseful.obj -MD -MP -MF $(DEPDIR)/XUseful.Tpo -c -o XUseful.obj `if test -f 'XGUI/src/util/XUseful.cpp'; then $(CYGPATH_W) 'XGUI/src/util/XUseful.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/util/XUseful.cpp'; fi`
	mv -f $(DEPDIR)/XUseful.Tpo $(DEPDIR)/XUseful.Po
#	source='XGUI/src/util/XUseful.cpp' object='XUseful.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XUseful.obj `if test -f 'XGUI/src/util/XUseful.cpp'; then $(CYGPATH_W) 'XGUI/src/util/XUseful.cpp'; else $(CYGPATH_W) '$(srcdir)/XGUI/src/util/XUseful.cpp'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(am__remove_distdir)
	test -d $(distdir) || mkdir $(distdir)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	-find $(distdir) -type d ! -perm -777 -exec chmod a+rwx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r $(distdir)
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

dist-tarZ: distdir
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__remove_distdir)

dist dist-all: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bunzip2 -c $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir); chmod a+w $(distdir)
	mkdir $(distdir)/_build
	mkdir $(distdir)/_inst
	chmod a-w $(distdir)
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && cd $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck
	$(am__remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'
distuninstallcheck:
	@cd $(distuninstallcheck_dir) \
	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) config.h
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am am--refresh check check-am clean \
	clean-binPROGRAMS clean-generic ctags dist dist-all dist-bzip2 \
	dist-gzip dist-shar dist-tarZ dist-zip distcheck distclean \
	distclean-compile distclean-generic distclean-hdr \
	distclean-tags distcleancheck distdir distuninstallcheck dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
